Introduce prvalue, xvalue and glvalue at the end.  It seems that
compiler implementors need to differentiate between these more
specialized categories (and not lvalues and rvalues only) than regular
C++ programmers.

An expression that creates a temporary object is a prvalue (a pure
rvalue).  A prvalue is a description how to create a temporary object:
the type of data to create, and the initializers, e.g., int(), 1, A(),
A("Hi!"), A{}.

The value of an xvalue can be moved.  An xvalue is one of the two:

* a temporary expression, i.e., an expression that creates a temporary
  data based on a prvalue (a description) -- a temporary is implicitly
  elibile for moving,

* static_cast<T &&>(t), where t is an lvalue -- we explicitly move t
  eligible for moving.

An lvalue is:

* a variable, e.g., x,

* the result of a function call that returns an lvalue reference.
