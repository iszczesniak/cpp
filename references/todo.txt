Pointer vs reference

Explain in detail the differences between the pointers (that must
always exist, because we can change them at run time), and references
(that exist only at compile time, because they do not need to exist at
run time, as they cannot be changed).  In the place of a reference,
the compiler hardcodes the address of the data the reference is bound
to.

**********************************************************************

Explicit object parameter (C++23)

Describe the overloading over categories with the explicit object
parameter (below) in comparison with the reference qualifier of a
member function (categories/over_cat.cc).

When time is ripe (GCC 14, Clang 18), save the following into
over_cat.cc:

int main()
{
  struct A
  {
    void operator = (this A &, int)
    {
    }

    void operator = (this A &&, int) = delete;
  };

  A a;
  a = 1;

  // Does not compile, because the overload declared deleted.
  // A() = 1;
}

**********************************************************************
