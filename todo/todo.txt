Quickies

* in-place construction

* std::bind to callable1 and callable2

* std::reference_wrapper, std::cref, std::ref

* unified initialization

* structured bindings, return {} to have a pair or a tuple, conversion
  beteween pair and tuple, std::tie

* variadic structured bindings (auto [... p])

**********************************************************************

value semantics

<=>, and how others are synthesized from <=>

ordering types, lower_bound, upper_bound in std::map

std::map::Compare::is_transparent

**********************************************************************

prvalue, glvalue, xvalue

**********************************************************************

We can't store a reference in a container (e.g., a vector), but we can
store pairs of references.  Why?

We can't have:

map<string &, int>

But we can have:

map<int, string &>

**********************************************************************

When not to use references:

* iterators, proxies,

* when it's better to pass by value.

**********************************************************************

Types int[] and int* seem the same:

void foo(int []);
void foo(int *);

But these are not the same:

unique_ptr<int[]>
unique_ptr<int*>

Sample code:

#include <iostream>

template<typename>
struct ER;

void foo(int[])
{
}

void foo(int *)
{
}

int
main()
{
  using type = int [];
  type x = {1, 2, 3};
  //  ER<type> er;
  static_assert(std::is_same_v<int *, int []>);
}

**********************************************************************

For the move semantics, whether this compiles:

A &a = A() = A();

depends on declaration of the assignment operator:

A & operator=(const A &) = default;
A & operator=(const A &) &;
A & operator=(A &&) &&;
A && operator=(A &&) &&;

Since C++23, we've got the explicit object member function that
simplifies writing a function that can accept (by the forwarding
reference) an object of an lvalue and rvalue that is cv-qualified or
not.

**********************************************************************

Overloading
-----------

* Explain what "more specialized" means.

* Deduction guides.

**********************************************************************

Smart pointers

* std::nullptr

* cyclic dependency: deterministic vs nondeterministic destruction

**********************************************************************

callable vs invokable

type traits

Type aliases cannot be specialized.  Use type traits.

Injected class names in class templates.

Partial specialization

Tag dispatching - is it still needed?

**********************************************************************

constexpr, consteval, and literal types.

**********************************************************************

Type erasure, if ever.
